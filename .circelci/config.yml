# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#


version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            python simple_test.py
            
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
        name: Decode and Store Service Account
        command: |
        echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ${HOME}/gcloud-service-key.json
        sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update
        sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        sudo /opt/google-cloud-sdk/bin/gcloud config set project $GCLOUD_PROJECT
        gcloud --quiet components update
        gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
        gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
        gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
        gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}

        
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - deploy
      - build
        requires:
          - deploy



# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#


version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image:  google/cloud-sdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            echo "-----start test:"
            python simple_test.py
            echo "-----end test:"
      - run:
         name:prepare to deploy
         command:|
           docker build -t gcr.io/$GOOGLE_PROJECT_ID/hello-circleci-app:v1 .
           gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v1
           gcloud container clusters create hello-circleci-cluster --num-nodes=2
           kubectl run hello-circleci-web --image=gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v1 --port 8080
           kubectl expose deployment hello-circleci-web --type=LoadBalancer --port 80 --target-port 8080
           kubectl scale deployment hello-circleci-web --replicas=2

            
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - run:
          name: Decode and Store Service Account
          command: |
          echo "-----start deploy:"
          docker build -t gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v2 .
          gcloud docker -- push gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v2
          kubectl set image deployment/hello-circleci-web hello-circleci-web=gcr.io/${GOOGLE_PROJECT_ID}/hello-app:v2
          kubectl expose deployment hello-circleci-web --type=LoadBalancer --port 80 --target-port 8080
          echo "-----finish"

        
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - deploy

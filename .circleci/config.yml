
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#

version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image:  google/cloud-sdk
    steps:
      - checkout
      - run:
          name: run tests
          command: |
            echo "-----start test:"
            python simple_test.py
            echo "-----end test"
      #- run:
          name: run env config
          command: |
            echo "-----start env:"
            echo $GCLOUD_SERVICE_KEY
            echo $GOOGLE_PROJECT_ID
            echo ${GOOGLE_PROJECT_ID}
            echo "-----end env"
      - run:
            echo $GCLOUD_SERVICE_KEY 
      #- run: echo "----run gcp config"
      #- run: echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ./gcloud-service-key.json
      #- run:      gcloud auth activate-service-account --key-file=./gcloud-service-key.json
      #- run:      gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      #- run:      gcloud --quiet config set compute/zone asia-east1-b
      #- run:      gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
      #- run:      echo "-----end config"echo
            
      

            
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run: echo "----run config"
      - run: echo $GCLOUD_SERVICE_KEY | base64 --decode --ignore-garbage > ./gcloud-service-key.json
      - run: gcloud auth activate-service-account --key-file=./gcloud-service-key.json
      #- run: docker version --format '{{.Client.Version}}'
      #- run: gcloud alpha auth configure-docker
      - run: gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run: gcloud --quiet config set compute/zone asia-east1-b
      - run: gcloud container images list --repository=gcr.io/${GOOGLE_PROJECT_ID}

      - run: echo "----run CD"
      
      #- run: docker build -t gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v4 .
      #- run: docker push  gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v4
      #- run: docker run --rm -p 8080:8080 gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v4
      #----
      #- run: gcloud container clusters create hello-circleci-cluster --num-nodes=4 
      #- run: gcloud container clusters get-credentials hello-circleci-cluster
      #- run: gcloud container builds submit --tag gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v4 .
      #- run: kubectl run hello-circleci-web --image=gcr.io/${GOOGLE_PROJECT_ID}/hello-circleci-app:v4 --port 80
      #- run: kubectl expose deployment hello-circleci-web --type=LoadBalancer --port 80 --target-port 80
      #----
      #- run: kubectl scale deployment hello-circleci-web --replicas=2
      #- run: kubectl set image deployment/hello-web hello-web=gcr.io/${PROJECT_ID}/hello-circleci-app:v3
      # get external ip
      - run: gcloud container clusters get-credentials hello-circleci-cluster
      - run: echo $(kubectl get service  hello-circleci-web) > service.txt
      - run: cat service.txt
      - run: kubectl get service  hello-circleci-web
      - run: cat service.txt  | awk '{print $10}'
      - run: echo $(cat service.txt  | awk '{print $10}') > ip.txt 
      - run: server_ip=$(cat service.txt  | awk '{print $10}')
      - run: cat ip.txt
      # install kompose
      
      - run: curl -L https://github.com/kubernetes/kompose/releases/download/v1.1.0/kompose-linux-amd64 -o kompose
      - run: chmod +x kompose
      - run: mv ./kompose /usr/local/bin/kompose
      # compose image and kubectl run 
      #- run: kompose up
      - run: kompose convert -f docker-compose.yml 
      - run: pwd
      - run: ls -la
      - run: yaml=$(ls *yaml)
      - run: echo $yaml
      - run: cat selenium-hub-deployment.yaml
      - run: cat selenium-hub-service.yaml
      - run: cat chrome-claim0-persistentvolumeclaim.yaml
      - run: cat chrome-deployment.yaml
      #- run: kubectl create -f .
      #----
      #- run: kubectl create -f selenium-hub-service.yaml
      #- run: kubectl create -f selenium-hub-deployment.yaml 
      #- run: kubectl create -f chrome-service.yaml
      #- run: kubectl create -f firefox-service.yaml
      #- run: kubectl create -f firefox-deployment.yaml
      - run: kubectl create -f chrome-deployment.yaml
      #- run: kubectl create -f chrome-claim0-persistentvolumeclaim.yaml

      
      - run: kubectl get pods
      - run: kubectl get services
      #----
      # run test case
      - run: pip install selenium
      - run: python test2.py --input=http://$(cat ip.txt)/test.html 

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - deploy
      #- build
      #- deploy:
          #requires:
          #  - build
